
trait RNG {
  type Rand[+A] = RNG => (A, RNG)

  def nextInt: (Int, RNG)

  val int: Rand[Int] = _.nextInt

  def unit[A](a: A): Rand[A] = rng => (a, rng)

  def map[A, B](s: Rand[A])(f:A => B): Rand[B] = rng => {
    val (a, rng2) = s(rng)
    (f(a), rng2)
  }
}


case class SimpleRNG(seed: Long) extends RNG {
  override def nextInt: (Int, RNG) = {
    val newSeed = (seed * 0x5DEECE66DL + 0xBL) & 0xFFFFFFFFFFFFL
    val nextRNG = SimpleRNG(newSeed)
    val n = (newSeed >>> 16).toInt
    (n, nextRNG)
  }

  def nonNegativeEven: Rand[Int] = map(SimpleRNG.nonNegativeInt)(i => i - i % 2)
}


case object SimpleRNG {
  def randomPair(rng: RNG): ((Int, Int), RNG) = {
    val (i1, rng2) = rng.nextInt
    val (i2, rng3) = rng2.nextInt

    ((i1, i2), rng3)
  }

  //  6.1
  def nonNegativeInt(rng: RNG): (Int, RNG) = {
    val (i1, rng1) = rng.nextInt
    val i2 = if (i1 == Int.MinValue) 0 else if (i1 < 0) -i1 else i1
    (i2, rng1)
  }

  //  6.2
  def double(rng: RNG): (Double, RNG) = {
    val (i1, rng1) = nonNegativeInt(rng)
    val d1 = if (i1 == Int.MaxValue) 0.0 else (i1.toDouble / Int.MaxValue)
    (d1, rng1)
  }

  //  6.3
  def intDouble(rng: RNG): ((Int, Double), RNG) = {
    val (i1, rng1) = nonNegativeInt(rng)
    val (d1, rng2) = double(rng1)
    ((i1, d1), rng2)
  }

  def doubleInt(rng: RNG): ((Double, Int), RNG) = {
    val (d1, rng1) = double(rng)
    val (i1, rng2) = nonNegativeInt(rng1)
    ((d1, i1), rng2)
  }

  def double3(rng: RNG): ((Double, Double, Double), RNG) = {
    val (d1, rng1) = double(rng)
    val (d2, rng2) = double(rng1)
    val (d3, rng3) = double(rng2)
    ((d1, d2, d3), rng3)
  }

  //  6.4
  def ints(count: Int)(rng: RNG): (List[Int], RNG) = {
    def loop(cnt: Int, ls: List[Int], r: RNG): (List[Int], RNG) = {
      if (cnt > 0) { val (iNext, rNext) = r.nextInt; loop(cnt - 1, ls ++ List(iNext), rNext)}
      else (ls, r)
    }

    loop(count, List[Int](), rng)
  }
}


object FP_Chap6 {
  def main(args:Array[String]): Unit = {
    val rng = SimpleRNG(42)

    println(SimpleRNG.ints(10)(rng)._1)
  }
}